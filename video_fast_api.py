from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel
import subprocess
import json
import sys
import os
import re
from fastapi.responses import Response
import tempfile
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Literal, Optional
app = FastAPI()
env = os.environ.copy()

env["PYTHONIOENCODING"] = "utf-8"
env["PYTHONUTF8"] = "1"
        
class VideoBody(BaseModel):
    url: str
    gemini_api_key: str
    
@app.middleware("http")
async def log_request(request: Request, call_next):
    body = await request.body()
    print("üì• RAW request body:", body.decode("utf-8", errors="replace"))
    response = await call_next(request)
    return response

@app.post("/video/upload")
async def youtube_upload(body: VideoBody):
    # L√†m s·∫°ch URL kh·ªèi d·∫•u ; n·∫øu c√≥
    clean_url = body.url.strip().rstrip(';')
    gemini_api_key = body.gemini_api_key.strip()
    # ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi t·ªõi script (n·∫øu c·∫ßn)
    script_path = "video2gemini_upload.py"  # ho·∫∑c /app/video2gemini_uploads.py n·∫øu d√πng Railway

    cmd = ["python", script_path, gemini_api_key ,clean_url]
    print("üîß subprocess args:", cmd)

    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            env=env
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")

    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"yt-dlp/Gemini error:\n{proc.stderr}"
        )

    # T√¨m ƒëo·∫°n JSON trong stdout
    import re
    try:
        json_text_match = re.search(r"{[\s\S]+}", proc.stdout)
        if not json_text_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n JSON h·ª£p l·ªá trong stdout")
        json_text = json_text_match.group(0)
        result_json = json.loads(json_text)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Kh√¥ng parse ƒë∆∞·ª£c JSON t·ª´ script: {e}\nSTDOUT:\n{proc.stdout}"
        )

    return result_json


class ImageBody(BaseModel):
    url: str
    gemini_api_key: str

@app.post("/image/upload")
async def image_upload(body: ImageBody):
    clean_url = body.url.strip().rstrip(';')
    gemini_api_key = body.gemini_api_key.strip()
    # T√πy theo v·ªã tr√≠ file script
    script_path = "image2gemini_upload.py"  # ho·∫∑c "/app/image2gemini_upload.py"
    cmd = [sys.executable, script_path, gemini_api_key, clean_url]
    print("üñºÔ∏è subprocess args:", cmd)

    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=300,
            env=os.environ  # ho·∫∑c b·∫°n c√≥ th·ªÉ t√πy ch·ªânh bi·∫øn m√¥i tr∆∞·ªùng ·ªü ƒë√¢y
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è X·ª≠ l√Ω qu√° th·ªùi gian")

    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )

    try:
        json_text_match = re.search(r"{[\s\S]+}", proc.stdout)
        if not json_text_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")
        json_text = json_text_match.group(0)
        result_json = json.loads(json_text)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\nSTDOUT:\n{proc.stdout}"
        )

    return result_json

from typing import List

class TikTokBody(BaseModel):
    url: str  # Danh s√°ch c√°c URL TikTok
    browser_type: str = "chromium"  # M·∫∑c ƒë·ªãnh l√† Firefox
    label: str = "newest"  # Nh√£n m·∫∑c ƒë·ªãnh
    max_items: int = 30  # S·ªë l∆∞·ª£ng video t·ªëi ƒëa m·ªói trang
    get_comments: str = "False"  # M·∫∑c ƒë·ªãnh kh√¥ng l·∫•y b√¨nh lu·∫≠n

@app.post("/tiktok/get_video_links_and_metadata")
async def tiktok_get_video_links_and_metadata(body: TikTokBody):
    label = body.label.strip().lower()
    browser_type = body.browser_type.strip().lower()

    # N·ªëi c√°c URL th√†nh m·ªôt chu·ªói c√°ch nhau b·ªüi d·∫•u c√°ch
    clean_url = body.url.strip()
    max_items = str(body.max_items).strip()
    script_path = "get_tiktok_video_links_and_metadata.py"
    get_comments = body.get_comments
    cmd = [sys.executable, script_path, browser_type, label, max_items, get_comments, clean_url]
    print(cmd)
    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            encoding="utf-8",
            env=env
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")
    
    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )
        
    try:
        # L·∫•y ph·∫ßn output sau ch·ªØ "Result"
        result_start = proc.stdout.find("Result:\n")
        if result_start == -1:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n 'Result' trong stdout")

        json_part = proc.stdout[result_start:]  # ph·∫ßn sau "Result"
        # T√¨m JSON m·∫£ng ƒë·∫ßu ti√™n b·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]
        json_match = re.search(r"\[\s*{[\s\S]*?}\s*\]", json_part)
        
        if not json_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")

        json_text = json_match.group(0).replace("\n", "")
        result_json = json.loads(json_text)


    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\n\n--- STDOUT ---\n{proc.stdout}"
        )
    return result_json

class TikTokCrawlAdsRequest(BaseModel):
    limit: str = '10'
@app.post("/tiktok/crawl_ads")
def crawl_ads(body: TikTokCrawlAdsRequest):
    limit = body.limit
    cmd = [sys.executable, "playwright_tiktok_ads.py", str(limit)]
    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            env=env,
            encoding='utf-8'
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")
    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )
        
    try:
        # L·∫•y ph·∫ßn output sau ch·ªØ "Result"
        result_start = proc.stdout.find("Result:\n")
        if result_start == -1:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n 'Result' trong stdout")

        json_part = proc.stdout[result_start:]  # ph·∫ßn sau "Result"
        # T√¨m JSON m·∫£ng ƒë·∫ßu ti√™n b·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]
        json_match = re.search(r"\[\s*{[\s\S]*?}\s*\]", json_part)
        
        if not json_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")

        json_text = json_match.group(0).replace("\n", "")
        result_json = json.loads(json_text)


    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\n\n--- STDOUT ---\n{proc.stdout}"
        )
    return result_json

class MetadataAdsRequest(BaseModel):
    urls: List[str]  # Danh s√°ch c√°c URL TikTok
    
@app.post("/tiktok/get_metadata_ads")
def get_metadata_ads():
    cmd = [sys.executable, "get_meta_data_video.py"]
    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            env=env
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")
    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )
    try:
        # L·∫•y ph·∫ßn output sau ch·ªØ "Result"
        result_start = proc.stdout.find("Result:\n")
        if result_start == -1:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n 'Result' trong stdout")

        json_part = proc.stdout[result_start:]  # ph·∫ßn sau "Result"
        # T√¨m JSON m·∫£ng ƒë·∫ßu ti√™n b·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]
        json_match = re.search(r"\[\s*{[\s\S]*?}\s*\]", json_part)
        
        if not json_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")

        json_text = json_match.group(0).replace("\n", "")
        result_json = json.loads(json_text)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\n\n--- STDOUT ---\n{proc.stdout}"
        )
    return result_json

class MusicUrl(BaseModel):
    urls: str  # Danh s√°ch c√°c URL TikTok
    
@app.post("/tiktok/get_audio_use_count")
def get_audio_use_count(body: MusicUrl):
    url = body.urls.strip().rstrip(';')
    if not url:
        raise HTTPException(status_code=400, detail="URL kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    cmd = [sys.executable, "get_audio_use_count.py", url]
    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            env=env
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")
    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )
    try:
        # L·∫•y ph·∫ßn output sau ch·ªØ "Result"
        result_start = proc.stdout.find("Result:\n")
        if result_start == -1:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n 'Result' trong stdout")
        json_part = proc.stdout[result_start:]  # ph·∫ßn sau "Result"
        # T√¨m JSON m·∫£ng ƒë·∫ßu ti√™n b·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]
        json_match = re.search(r"\{\s*[\s\S]*?\s*\}", json_part)
        if not json_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")
        json_text = json_match.group(0).replace("\n", "")
        result_json = json.loads(json_text)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\n\n--- STDOUT ---\n{proc.stdout}"
        )
    return result_json


class Hashtag(BaseModel):
    hashtag: str  # Danh s√°ch c√°c URL TikTok
    
@app.post("/tiktok/get_hashtag_use_count")
def get_hashtag_use_count(body: Hashtag):
    hashtag = body.hashtag.strip().rstrip(';')
    if not hashtag:
        raise HTTPException(status_code=400, detail="URL kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    cmd = [sys.executable, "get_hashtag_use_count.py", hashtag]
    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            env=env
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")
    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )
    try:
        # L·∫•y ph·∫ßn output sau ch·ªØ "Result"
        result_start = proc.stdout.find("Result:\n")
        if result_start == -1:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n 'Result' trong stdout")
        json_part = proc.stdout[result_start:]  # ph·∫ßn sau "Result"
        # T√¨m JSON m·∫£ng ƒë·∫ßu ti√™n b·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]
        json_match = re.search(r"\{\s*[\s\S]*?\s*\}", json_part)
        if not json_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")
        json_text = json_match.group(0).replace("\n", "")
        result_json = json.loads(json_text)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\n\n--- STDOUT ---\n{proc.stdout}"
        )
    return result_json



import os
import sys
import json
import re
import subprocess
from fastapi import HTTPException

@app.post("/tiktok/crawl_audio")
def crawl_ads(body: TikTokCrawlAdsRequest):
    # 1) Chu·∫©n ho√° limit
    try:
        limit = int(body.limit)
    except Exception:
        raise HTTPException(status_code=400, detail="`limit` ph·∫£i l√† s·ªë nguy√™n")

    # 2) √âp UTF-8 cho ti·∫øn tr√¨nh con
    base_env = os.environ.copy()
    if 'env' in globals() and isinstance(env, dict):
        base_env.update(env)
    base_env.update({
        "PYTHONUTF8": "1",
        "PYTHONIOENCODING": "utf-8"
    })

    cmd = [sys.executable, "playwright_tiktok_audio.py", str(limit)]

    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,               # chuy·ªÉn bytes -> str
            encoding="utf-8",        # QUAN TR·ªåNG: √©p UTF-8
            errors="replace",        # tr√°nh UnicodeDecodeError
            timeout=900,
            env=base_env
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")

    if proc.returncode != 0:
        # Tr·∫£ stderr ƒë√£ l√† UTF-8 n√™n kh√¥ng v·ª° k√Ω t·ª±
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )

    # 3) T√¨m m·∫£ng JSON ƒë·∫ßu ti√™n trong stdout b·∫±ng c√°ch ƒë·∫øm ngo·∫∑c
    import json

    def extract_first_json_array(text: str) -> str | None:
        """
        T√¨m m·∫£ng JSON ƒë·∫ßu ti√™n trong text b·∫±ng JSONDecoder.raw_decode.
        B·ªè qua nh·ªØng ƒëo·∫°n nh∆∞ '[INFO]' v√¨ kh√¥ng decode ƒë∆∞·ª£c th√†nh JSON.
        Tr·∫£ v·ªÅ substring JSON (d·∫°ng chu·ªói) n·∫øu t√¨m th·∫•y, ng∆∞·ª£c l·∫°i None.
        """
        decoder = json.JSONDecoder()

        # ∆Øu ti√™n t√¨m sau 'Result:' ƒë·ªÉ tr√°nh log l·∫∑t v·∫∑t ph√≠a tr∆∞·ªõc
        start_pos = text.find("Result:")
        search_text = text[start_pos:] if start_pos != -1 else text

        for i, ch in enumerate(search_text):
            if ch == '[':
                try:
                    obj, end = decoder.raw_decode(search_text[i:])  # decode t·ª´ v·ªã tr√≠ '['
                    if isinstance(obj, list):
                        return search_text[i:i+end]  # c·∫Øt ƒë√∫ng l√°t JSON
                except Exception:
                    continue  # kh√¥ng h·ª£p l·ªá -> th·ª≠ '[' k·∫ø ti·∫øp
        return None

    stdout = proc.stdout

    json_text = extract_first_json_array(stdout)
    if not json_text:
        raise HTTPException(
            status_code=500,
            detail="Kh√¥ng t√¨m th·∫•y m·∫£ng JSON h·ª£p l·ªá trong stdout.\n--- STDOUT ---\n" + stdout
        )

    try:
        result_json = json.loads(json_text)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON: {e}\n--- JSON tr√≠ch ra ---\n{json_text}\n--- STDOUT ---\n{stdout}"
        )

    return result_json


@app.post("/tiktok/crawl_hashtag")
def crawl_ads(body: TikTokCrawlAdsRequest):
    limit = body.limit
    cmd = [sys.executable, "playwright_tiktok_hashtag.py", str(limit)]
    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            env=env
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")
    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )
        
    try:
        # L·∫•y ph·∫ßn output sau ch·ªØ "Result"
        result_start = proc.stdout.find("Result:\n")
        if result_start == -1:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n 'Result' trong stdout")

        json_part = proc.stdout[result_start:]  # ph·∫ßn sau "Result"
        # T√¨m JSON m·∫£ng ƒë·∫ßu ti√™n b·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]
        json_match = re.search(r"\[\s*{[\s\S]*?}\s*\]", json_part)
        
        if not json_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")

        json_text = json_match.group(0).replace("\n", "")
        result_json = json.loads(json_text)


    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\n\n--- STDOUT ---\n{proc.stdout}"
        )
    return result_json

class TikTokCrawlCommentsRequest(BaseModel):
    url: str
    limit: int = 100
@app.post("/tiktok/get_comments")
def crawl_ads(body: TikTokCrawlCommentsRequest):
    limit = body.limit
    url = body.url.strip().rstrip(';')
    cmd = [sys.executable, "get_comments.py", url, str(limit)]
    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            encoding="utf-8",    # <- √©p cha decode UTF-8
            errors="replace",
            env=env
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")
    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )
        
    try:
        # L·∫•y ph·∫ßn output sau ch·ªØ "Result"
        result_start = proc.stdout.find("Result:\n")
        if result_start == -1:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n 'Result' trong stdout")

        json_part = proc.stdout[result_start:]  # ph·∫ßn sau "Result"
        # T√¨m JSON m·∫£ng ƒë·∫ßu ti√™n b·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]
        json_match = re.search(r"\[\s*{[\s\S]*?}\s*\]", json_part)
        
        if not json_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")

        json_text = json_match.group(0).replace("\n", "")
        result_json = json.loads(json_text)

    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\n\n--- STDOUT ---\n{proc.stdout}"
        )
    return result_json

class EasyCrawlRequest(BaseModel):
    url: str
    type_output: str = "html"
@app.post("/get_html")
def crawl_easy(body: EasyCrawlRequest):
    url = body.url
    type_output = body.type_output
    try:
        result = subprocess.run(
            [sys.executable, "get_html.py", url, type_output],
            capture_output=True,
            text=True,
            check=True,
            env=env,
            encoding='utf-8'
        )
        matches = re.findall(r"\{.*\}", result.stdout, re.DOTALL)
        json_str = matches[-1] if matches else None
        if not json_str:
            return {
                "error": "Kh√¥ng t√¨m th·∫•y JSON trong stdout",
                "stdout": result.stdout
            }
        return json.loads(json_str)
    except subprocess.CalledProcessError as e:
        return {"error": "Script l·ªói", "details": e.stderr}
    except Exception as e:
        return {"error": "L·ªói kh√¥ng x√°c ƒë·ªãnh", "details": str(e)}

class TranscriptRequest(BaseModel):
    url: str
    
@app.post("/get_transcript")
def get_transcript(body: TranscriptRequest):
    url = body.url.strip().rstrip(';')
    if not url:
        raise HTTPException(status_code=400, detail="URL kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    cmd = [sys.executable, "get_transcripts.py", url]
    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            env=env,
            encoding='utf-8'
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")
    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )
    try:
        # L·∫•y ph·∫ßn output sau ch·ªØ "Result"
        result_start = proc.stdout.find("Result:\n")
        if result_start == -1:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n 'Result' trong stdout")
        json_part = proc.stdout[result_start:]  # ph·∫ßn sau "Result"
        # T√¨m JSON m·∫£ng ƒë·∫ßu ti√™n b·∫Øt ƒë·∫ßu b·∫±ng { v√† k·∫øt th√∫c b·∫±ng }
        json_match = re.search(r"\{\s*[\s\S]*?\s*\}", json_part)
        if not json_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")
        json_text = json_match.group(0).replace("\n", "")
        result_json = json.loads(json_text)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\n\n--- STDOUT ---\n{proc.stdout}"
        )
    return result_json

class DBURL(BaseModel):
    url: str
    

@app.post("/get_pruned_groups")
def get_pruned_groups(body: DBURL):
    url = body.url.strip().rstrip(';')
    if not url:
        raise HTTPException(status_code=400, detail="URL kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    cmd = [sys.executable, "groups_pruned.py", "--db-url", url]
    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            env=env,
            encoding='utf-8'
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")
    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )
    def _extract_first_json_array(s: str) -> str | None:
        # T√¨m v√† c·∫Øt m·∫£ng JSON ƒë·∫ßu ti√™n b·∫±ng ƒë·∫øm ngo·∫∑c an to√†n v·ªõi chu·ªói/escape
        start = s.find('[')
        if start == -1:
            return None
        depth = 0
        in_str = False
        esc = False
        for i in range(start, len(s)):
            ch = s[i]
            if in_str:
                if esc:
                    esc = False
                elif ch == '\\':
                    esc = True
                elif ch == '"':
                    in_str = False
            else:
                if ch == '"':
                    in_str = True
                elif ch == '[':
                    depth += 1
                elif ch == ']':
                    depth -= 1
                    if depth == 0:
                        return s[start:i+1]
        return None

    def parse_stdout_to_json(stdout: str):
        # 1) Th·ª≠ parse tr·ª±c ti·∫øp (tr∆∞·ªùng h·ª£p script in JSON thu·∫ßn)
        try:
            return json.loads(stdout)
        except json.JSONDecodeError:
            pass

        # 2) T√¨m JSON ƒë·∫ßu ti√™n b·∫•t k·ª≥ ({...} ho·∫∑c [...]) b·∫±ng raw_decode
        dec = json.JSONDecoder()
        for i, ch in enumerate(stdout):
            if ch in '[{':
                try:
                    obj, end = dec.raw_decode(stdout[i:])
                    return obj
                except json.JSONDecodeError:
                    continue

        # 3) Tr∆∞·ªùng h·ª£p bi·∫øt producer in RA M·ªòT M·∫¢NG [...]: d√πng match ngo·∫∑c
        arr = _extract_first_json_array(stdout)
        if arr is not None:
            return json.loads(arr)

        # 4) Fallback: NDJSON (m·ªói d√≤ng l√† 1 JSON object)
        items = []
        for line in stdout.splitlines():
            line = line.strip()
            if not line or line[0] not in '{[':
                continue
            try:
                items.append(json.loads(line))
            except Exception:
                pass
        if items:
            return items

        raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")

    # ===== Ch·ªó g·ªçi trong FastAPI =====
    proc = subprocess.run(
        cmd,
        capture_output=True,
        text=True,
        timeout=900,
        env=env,
        encoding='utf-8'
    )

    if proc.returncode != 0:
        raise HTTPException(status_code=500, detail=f"Script error: {proc.stderr}")

    try:
        result_json = parse_stdout_to_json(proc.stdout)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\n\n--- STDOUT ---\n{proc.stdout}"
        )

    return result_json


class PosterRequest(BaseModel):
    images: List[str] = Field(..., description="Danh s√°ch URL/path ·∫£nh (l·∫•y t·ªëi ƒëa 6)")
    text: str = Field(..., description="Overlay text")
    fmt: Literal["jpeg", "png"] = Field("jpeg", description="ƒê·ªãnh d·∫°ng ·∫£nh xu·∫•t")
    quality: Optional[int] = Field(90, description="Ch·ªâ d√πng cho JPEG 0‚Äì100")
    scale: int = Field(2, description="Device scale factor khi render ·∫£nh")
    wait: Literal["load", "domcontentloaded", "networkidle", "commit"] = Field(
        "networkidle", description="Chi·∫øn l∆∞·ª£c ch·ªù t·∫£i trang"
    )
    # N·∫øu poster_generator.py n·∫±m n∆°i kh√°c, ch·ªânh t·∫°i ƒë√¢y
    script_path: str = Field("poster_generator.py", description="ƒê∆∞·ªùng d·∫´n script sinh poster")

@app.post("/generate-poster")
def generate_poster(body: PosterRequest):
    if not body.images:
        raise HTTPException(status_code=400, detail="Thi·∫øu danh s√°ch ·∫£nh")

    # Th∆∞ m·ª•c t·∫°m ƒë·ªÉ ch·ª©a html + ·∫£nh => auto cleanup khi ra kh·ªèi with
    with tempfile.TemporaryDirectory() as tmpdir:
        tmpdir_path = Path(tmpdir)
        html_path = tmpdir_path / "poster.html"
        img_ext = "jpg" if body.fmt == "jpeg" else "png"
        img_path = tmpdir_path / f"poster.{img_ext}"

        # L·∫Øp command g·ªçi script
        cmd = [sys.executable, body.script_path, *body.images, "-t", body.text, "-o", str(html_path)]
        if body.fmt == "jpeg":
            cmd += ["--jpeg", str(img_path)]
            if body.quality is not None:
                cmd += ["--quality", str(int(body.quality))]
        else:
            cmd += ["--png", str(img_path)]

        # C√≥ th·ªÉ truy·ªÅn th√™m scale/wait v√†o script n·∫øu b·∫°n b·ªï sung tham s·ªë t∆∞∆°ng ·ª©ng
        # ·ªû ƒë√¢y script ƒë√£ c√≥ --scale/--wait n√™n ta truy·ªÅn lu√¥n:
        cmd += ["--scale", str(int(body.scale)), "--wait", body.wait]

        try:
            proc = subprocess.run(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                timeout=900,
                encoding="utf-8",
            )
        except subprocess.TimeoutExpired:
            raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")

        if proc.returncode != 0:
            err = proc.stderr.decode("utf-8", "replace")  # ch·ªâ ƒë·ªÉ hi·ªÉn th·ªã l·ªói
            raise HTTPException(status_code=500, detail=f"Script error:\n{err}")

        if not img_path.exists():
            # fallback: ƒë√¥i khi ng∆∞·ªùi d√πng truy·ªÅn sai fmt, th·ª≠ d√≤ file c√≤n l·∫°i
            other = tmpdir_path / ("poster.png" if img_ext == "jpg" else "poster.jpg")
            if other.exists():
                img_path = other
            else:
                raise HTTPException(
                    status_code=500,
                    detail=f"Kh√¥ng t√¨m th·∫•y ·∫£nh ƒë·∫ßu ra: {img_path}",
                )

        # ƒê·ªçc bytes r·ªìi tr·∫£ v·ªÅ octet-stream; v√¨ d√πng TemporaryDirectory n√™n file s·∫Ω t·ª± xo√°
        data = img_path.read_bytes()

        # B·∫°n mu·ªën octet-stream, m√¨nh set ƒë√∫ng nh∆∞ y√™u c·∫ßu
        headers = {
            "Content-Disposition": f'inline; filename="{img_path.name}"'
        }
        return Response(content=data, media_type="application/octet-stream", headers=headers)
    
    
class MakeVideoRequest(BaseModel):
    scripts: List[str]
    fps: str
    show_script: str
    id_folder: str
import shutil
def delete_resource(script_dir='./script', audio_dir='./audio', image_dir='./image'):
    shutil.rmtree(script_dir)
    shutil.rmtree(audio_dir)
    shutil.rmtree(image_dir)

from starlette.background import BackgroundTask
from fastapi.responses import FileResponse
@app.post("/generate-video")
def generate_video(body: MakeVideoRequest):
    scripts = body.scripts
    id_folder = body.id_folder
    show_script = body.show_script
    fps = body.fps
    cmd = [sys.executable, "make_video_from_image.py", id_folder, fps, show_script , json.dumps(scripts, ensure_ascii=False)]
    print(cmd)
    proc = subprocess.run(
        cmd,
        capture_output=True,
        text=True,
        timeout=900,
        env=env,
        encoding='utf-8'
    )
    if proc.returncode != 0:
        raise HTTPException(status_code=500, detail=f"Script error: {proc.stderr}")
    
    video_path = './audio/my_video.mp4'
    return FileResponse(path=video_path, media_type="video/mp4", filename="video.mp4",background=BackgroundTask(lambda: delete_resource))
    
    

class GetBatchJobContentGemini(BaseModel):
    job_name: str
    gemini_api: str
    
from google import genai
from google.genai import types
import json

@app.post("/get_batch_job_content_gemini")
def get_batch_job_content_gemini(body: GetBatchJobContentGemini):
    job_name = body.job_name
    gemini_api = body.gemini_api
    client = genai.Client(api_key=gemini_api)
    
    batch_job = client.batches.get(name=job_name)
    if batch_job.state.name == "JOB_STATE_SUCCEEDED":
        result = None
        for i, inline_response in enumerate(batch_job.dest.inlined_responses):
            result = json.loads(inline_response.response.text)
        
        return {
            "status": batch_job.state.name,
            "response": result
        }
    else:
        return {
            "status": batch_job.state.name,
            "response": "" 
        }

    
    
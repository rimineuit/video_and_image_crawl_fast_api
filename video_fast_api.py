from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel
import subprocess
import json
import sys
import os
import re

app = FastAPI()
env = os.environ.copy()

env["PYTHONIOENCODING"] = "utf-8"
env["PYTHONUTF8"] = "1"
        
class VideoBody(BaseModel):
    url: str
    gemini_api_key: str
    
@app.middleware("http")
async def log_request(request: Request, call_next):
    body = await request.body()
    print("üì• RAW request body:", body.decode("utf-8", errors="replace"))
    response = await call_next(request)
    return response

@app.post("/video/upload")
async def youtube_upload(body: VideoBody):
    # L√†m s·∫°ch URL kh·ªèi d·∫•u ; n·∫øu c√≥
    clean_url = body.url.strip().rstrip(';')
    gemini_api_key = body.gemini_api_key.strip()
    # ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi t·ªõi script (n·∫øu c·∫ßn)
    script_path = "video2gemini_upload.py"  # ho·∫∑c /app/video2gemini_uploads.py n·∫øu d√πng Railway

    cmd = ["python", script_path, gemini_api_key ,clean_url]
    print("üîß subprocess args:", cmd)

    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            env=env
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")

    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"yt-dlp/Gemini error:\n{proc.stderr}"
        )

    # T√¨m ƒëo·∫°n JSON trong stdout
    import re
    try:
        json_text_match = re.search(r"{[\s\S]+}", proc.stdout)
        if not json_text_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n JSON h·ª£p l·ªá trong stdout")
        json_text = json_text_match.group(0)
        result_json = json.loads(json_text)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Kh√¥ng parse ƒë∆∞·ª£c JSON t·ª´ script: {e}\nSTDOUT:\n{proc.stdout}"
        )

    return result_json


class ImageBody(BaseModel):
    url: str
    gemini_api_key: str

@app.post("/image/upload")
async def image_upload(body: ImageBody):
    clean_url = body.url.strip().rstrip(';')
    gemini_api_key = body.gemini_api_key.strip()
    # T√πy theo v·ªã tr√≠ file script
    script_path = "image2gemini_upload.py"  # ho·∫∑c "/app/image2gemini_upload.py"
    cmd = [sys.executable, script_path, gemini_api_key, clean_url]
    print("üñºÔ∏è subprocess args:", cmd)

    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=300,
            env=os.environ  # ho·∫∑c b·∫°n c√≥ th·ªÉ t√πy ch·ªânh bi·∫øn m√¥i tr∆∞·ªùng ·ªü ƒë√¢y
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è X·ª≠ l√Ω qu√° th·ªùi gian")

    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )

    try:
        json_text_match = re.search(r"{[\s\S]+}", proc.stdout)
        if not json_text_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")
        json_text = json_text_match.group(0)
        result_json = json.loads(json_text)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\nSTDOUT:\n{proc.stdout}"
        )

    return result_json
from typing import List

class TikTokBody(BaseModel):
    urls: List[str]  # Danh s√°ch c√°c URL TikTok
    browser_type: str = "firefox"  # M·∫∑c ƒë·ªãnh l√† Firefox
    label: str = "newest"  # Nh√£n m·∫∑c ƒë·ªãnh
    max_items: int = 30  # S·ªë l∆∞·ª£ng video t·ªëi ƒëa m·ªói trang
    get_comments: str = "False"  # M·∫∑c ƒë·ªãnh kh√¥ng l·∫•y b√¨nh lu·∫≠n

@app.post("/tiktok/get_video_links_and_metadata")
async def tiktok_get_video_links_and_metadata(body: TikTokBody):
    label = body.label.strip().lower()
    browser_type = body.browser_type.strip().lower()

    # N·ªëi c√°c URL th√†nh m·ªôt chu·ªói c√°ch nhau b·ªüi d·∫•u c√°ch
    clean_urls = ' '.join(url.strip().rstrip(';') for url in body.urls)
    max_items = str(body.max_items).strip()
    script_path = "get_tiktok_video_links_and_metadata.py"
    get_comments = body.get_comments
    cmd = [sys.executable, script_path, browser_type, label, max_items, get_comments] + clean_urls.split()
    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            encoding="utf-8",
            env=env
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")
    
    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )
        
    try:
        # L·∫•y ph·∫ßn output sau ch·ªØ "Result"
        result_start = proc.stdout.find("Result:\n")
        if result_start == -1:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n 'Result' trong stdout")

        json_part = proc.stdout[result_start:]  # ph·∫ßn sau "Result"
        # T√¨m JSON m·∫£ng ƒë·∫ßu ti√™n b·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]
        json_match = re.search(r"\[\s*{[\s\S]*?}\s*\]", json_part)
        
        if not json_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")

        json_text = json_match.group(0).replace("\n", "")
        result_json = json.loads(json_text)


    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\n\n--- STDOUT ---\n{proc.stdout}"
        )
    return result_json

class TikTokCrawlAdsRequest(BaseModel):
    limit: str = '10'
@app.post("/tiktok/crawl_ads")
def crawl_ads(body: TikTokCrawlAdsRequest):
    limit = body.limit
    cmd = [sys.executable, "playwright_tiktok_ads.py", str(limit)]
    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            env=env
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")
    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )
        
    try:
        # L·∫•y ph·∫ßn output sau ch·ªØ "Result"
        result_start = proc.stdout.find("Result:\n")
        if result_start == -1:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n 'Result' trong stdout")

        json_part = proc.stdout[result_start:]  # ph·∫ßn sau "Result"
        # T√¨m JSON m·∫£ng ƒë·∫ßu ti√™n b·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]
        json_match = re.search(r"\[\s*{[\s\S]*?}\s*\]", json_part)
        
        if not json_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")

        json_text = json_match.group(0).replace("\n", "")
        result_json = json.loads(json_text)


    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\n\n--- STDOUT ---\n{proc.stdout}"
        )
    return result_json

class MetadataAdsRequest(BaseModel):
    urls: List[str]  # Danh s√°ch c√°c URL TikTok
    
@app.post("/tiktok/get_metadata_ads")
def get_metadata_ads():
    cmd = [sys.executable, "get_meta_data_video.py"]
    try:
        proc = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=900,
            env=env
        )
    except subprocess.TimeoutExpired:
        raise HTTPException(status_code=504, detail="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω")
    if proc.returncode != 0:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói khi ch·∫°y script:\n{proc.stderr}"
        )
    try:
        # L·∫•y ph·∫ßn output sau ch·ªØ "Result"
        result_start = proc.stdout.find("Result:\n")
        if result_start == -1:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒëo·∫°n 'Result' trong stdout")

        json_part = proc.stdout[result_start:]  # ph·∫ßn sau "Result"
        # T√¨m JSON m·∫£ng ƒë·∫ßu ti√™n b·∫Øt ƒë·∫ßu b·∫±ng [ v√† k·∫øt th√∫c b·∫±ng ]
        json_match = re.search(r"\[\s*{[\s\S]*?}\s*\]", json_part)
        
        if not json_match:
            raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong stdout")

        json_text = json_match.group(0).replace("\n", "")
        result_json = json.loads(json_text)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói parse JSON t·ª´ output: {e}\n\n--- STDOUT ---\n{proc.stdout}"
        )
    return result_json

        
        
    